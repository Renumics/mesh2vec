name: CI/CD
on: push
permissions:
  contents: write

jobs:
  prepare-linux:
    strategy:
      matrix:
        python-version: ["3.9", "3.11"]
        os-version: ["ubuntu-latest"]
    runs-on: ${{ matrix.os-version }}
    steps:
      - uses: actions/checkout@v5
      - name: Setup CI
        uses: "./.github/actions/ci-setup"
        with:
          os: ${{ matrix.os-version }}
          python-version: ${{ matrix.python-version }}

  prepare-win:
    strategy:
      matrix:
        python-version: ["3.9", "3.11"]
        os-version: ["windows-latest"]
    runs-on: ${{ matrix.os-version }}
    steps:
      - uses: actions/checkout@v5
      - name: Setup CI
        uses: "./.github/actions/ci-setup"
        with:
          os: ${{ matrix.os-version }}
          python-version: ${{ matrix.python-version }}

  check-format:
    needs: prepare-linux
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
      - name: Setup CI
        uses: "./.github/actions/ci-setup"
        with:
          os: "ubuntu-latest"
          python-version: "3.9"
      - name: check
        run: |
          poetry run black --check docs mesh2vec scripts tests

  pylint:
    needs: prepare-linux
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
      - name: Setup CI
        uses: "./.github/actions/ci-setup"
        with:
          os: "ubuntu-latest"
          python-version: "3.9"
      - name: check
        run: |
          poetry run pylint docs/examples mesh2vec scripts tests

  mypy:
    needs: prepare-linux
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
      - name: Setup CI
        uses: "./.github/actions/ci-setup"
        with:
          os: "ubuntu-latest"
          python-version: "3.9"
      - name: check
        run: |
          poetry run mypy docs/examples mesh2vec scripts tests

  audit:
    needs: [prepare-linux, prepare-win]
    strategy:
      matrix:
        python-version: ["3.9", "3.11"]
        os-version: ["windows-latest", "ubuntu-latest"]
    runs-on: ${{ matrix.os-version }}
    steps:
      - uses: actions/checkout@v5
      - name: Setup CI
        uses: "./.github/actions/ci-setup"
        with:
          os: ${{ matrix.os-version }}
          python-version: ${{ matrix.python-version }}
      - name: check
        run: |
          poetry run pip-audit

  doctest:
    needs: [prepare-linux, prepare-win]
    strategy:
      matrix:
        python-version: ["3.9", "3.11"]
        os-version: ["windows-latest", "ubuntu-latest"]
    runs-on: ${{ matrix.os-version }}
    steps:
      - uses: actions/checkout@v5
      - name: Setup CI
        uses: "./.github/actions/ci-setup"
        with:
          os: ${{ matrix.os-version }}
          python-version: ${{ matrix.python-version }}
      - name: test
        run: |
          poetry run sphinx-build docs/source build/documentation/ -W -b html
          poetry run sphinx-build docs/source build/documentation/ -W -b doctest

  unit-tests:
    needs: [prepare-linux, prepare-win]
    strategy:
      matrix:
        python-version: ["3.9", "3.11"]
        os-version: ["windows-latest", "ubuntu-latest"]
    runs-on: ${{ matrix.os-version }}
    steps:
      - uses: actions/checkout@v5
      - name: Setup CI
        uses: "./.github/actions/ci-setup"
        with:
          os: ${{ matrix.os-version }}
          python-version: ${{ matrix.python-version }}
      - name: test
        run: |
          poetry run pytest tests

  docs:
    needs: prepare-linux
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
      - name: Setup CI
        uses: "./.github/actions/ci-setup"
        with:
          os: "ubuntu-latest"
          python-version: "3.9"
      - name: build docs
        run: |
          poetry run sphinx-build docs/source build/documentation/ -W -b html
      - name: Store docs
        uses: actions/upload-artifact@v5
        with:
          name: docs
          path: build/documentation/

  build:
    needs: prepare-linux
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
      - name: Setup CI
        uses: "./.github/actions/ci-setup"
        with:
          os: "ubuntu-latest"
          python-version: "3.9"
      - name: build wheels
        run: |
          poetry build -f wheel -vvv
          poetry run check-wheel-contents dist/
      - name: Store wheels
        uses: actions/upload-artifact@v5
        with:
          name: dist
          path: dist/

  release-docs:
    if: startsWith(github.ref, 'refs/tags/v')
    needs: [check-format, build, unit-tests, doctest, docs, audit, pylint, mypy]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
      - name: Setup CI
        uses: "./.github/actions/ci-setup"
        with:
          os: "ubuntu-latest"
          python-version: "3.9"
      - name: Download docs
        uses: actions/download-artifact@v6
        with:
          name: docs
          path: build/documentation/
      - name: Deploy
        uses: peaceiris/actions-gh-pages@4f9cc6602d3f66b9c108549d475ec49e8ef4d45e
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./build/documentation/

  release:
    if: startsWith(github.ref, 'refs/tags/v')
    needs: [check-format, build, unit-tests, doctest, docs, audit, pylint, mypy]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
      - name: Setup CI
        uses: "./.github/actions/ci-setup"
        with:
          os: "ubuntu-latest"
          python-version: "3.9"
      - name: Download wheels
        uses: actions/download-artifact@v6
        with:
          name: dist
          path: dist/
      - name: Publish package to TestPyPI
        uses: pypa/gh-action-pypi-publish@ed0c53931b1dc9bd32cbe73a98c7f6766f8a527e
        with:
          password: ${{ secrets.PYPI_API_TOKEN }}
